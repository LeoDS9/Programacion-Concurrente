process alumno[id: 0..44]{
    text enunciado, examen;
    int nota;
    Examen.llegar(enunciado);
    //resolver enunciado;
    Escritorio.entregarExamen(id,examen,nota);
}

process preceptor{
    int i;
    text enunciado;
    Examen.darEnunciado(enunciado);
}

process profesora{
    int nota, idA;
    text examen;
    for int i = 1..45{
        Escritorio.esperarExamen(idA,examen);
        nota = corregirExamen(examen);
        Escritorio.darNota(idA,nota);
    }
}


monitor Examen{
    cond esperaA, esperaP;
    int cant = 0;
    text enunciado;

    Procedure llegar(enun: out text){
        cant++;
        if (cant == 45)
            signal(esperaP);
        wait(esperaA);
        enun = enunciado;
    }

    Procedure darEnunciado(enun: in int){
        if(cant < 45)
            wait(esperaP);
        enunciado = enun;
        signal_all(esperaA);
    }

    
}

monitor Escritorio{
    cond esperaNota, esperaProf;
    text examenes[45];
    int notas[45];
    Cola cola;

    Procedure entregarExamen(id: in int, ex: in text, n: out int){
        Push(cola,(id,ex));
        signal(esperaProf);
        wait(esperarNota);
        n = notas[id];
    }


    Procedure esperarExamen(idA: out int, ex: out text){
        if (Empty(cola))
            wait(esperaProf);
        Pop(cola,(id,ex));
    }

    Procedure darNota(idA: in int, n: in int){
        notas[idA] = n;
        signal(esperarNota);
    }
}

